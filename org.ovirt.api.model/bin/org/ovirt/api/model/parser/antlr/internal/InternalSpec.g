/*
 * generated by Xtext 2.10.0
 */
grammar InternalSpec;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.ovirt.api.model.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.ovirt.api.model.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.ovirt.api.model.services.SpecGrammarAccess;

}

@parser::members {

 	private SpecGrammarAccess grammarAccess;

    public InternalSpecParser(TokenStream input, SpecGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SpecGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getTypesDecTypeParserRuleCall_0_0());
				}
				lv_types_0_0=ruleDecType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"types",
						lv_types_0_0,
						"org.ovirt.api.model.Spec.DecType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getServicesServiceParserRuleCall_1_0());
				}
				lv_services_1_0=ruleService
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"services",
						lv_services_1_0,
						"org.ovirt.api.model.Spec.Service");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleDoc
entryRuleDoc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDocRule()); }
	iv_ruleDoc=ruleDoc
	{ $current=$iv_ruleDoc.current; }
	EOF;

// Rule Doc
ruleDoc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getDocAccess().getDocAction_0_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getDocAccess().getNoDocParserRuleCall_0_1());
			}
			ruleNoDoc
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getDocAccess().getShortDocParserRuleCall_1());
		}
		this_ShortDoc_2=ruleShortDoc
		{
			$current = $this_ShortDoc_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDocAccess().getFullDocParserRuleCall_2());
		}
		this_FullDoc_3=ruleFullDoc
		{
			$current = $this_FullDoc_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNoDoc
entryRuleNoDoc returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNoDocRule()); }
	iv_ruleNoDoc=ruleNoDoc
	{ $current=$iv_ruleNoDoc.current.getText(); }
	EOF;

// Rule NoDoc
ruleNoDoc returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='TODO'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNoDocAccess().getTODOKeyword());
	}
;

// Entry rule entryRuleShortDoc
entryRuleShortDoc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShortDocRule()); }
	iv_ruleShortDoc=ruleShortDoc
	{ $current=$iv_ruleShortDoc.current; }
	EOF;

// Rule ShortDoc
ruleShortDoc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_summary_0_0=RULE_STRING
			{
				newLeafNode(lv_summary_0_0, grammarAccess.getShortDocAccess().getSummarySTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getShortDocRule());
				}
				setWithLastConsumed(
					$current,
					"summary",
					lv_summary_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleFullDoc
entryRuleFullDoc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFullDocRule()); }
	iv_ruleFullDoc=ruleFullDoc
	{ $current=$iv_ruleFullDoc.current; }
	EOF;

// Rule FullDoc
ruleFullDoc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='summary:'
		{
			newLeafNode(otherlv_0, grammarAccess.getFullDocAccess().getSummaryKeyword_0());
		}
		(
			(
				lv_summary_1_0=RULE_STRING
				{
					newLeafNode(lv_summary_1_0, grammarAccess.getFullDocAccess().getSummarySTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFullDocRule());
					}
					setWithLastConsumed(
						$current,
						"summary",
						lv_summary_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_2='description:'
			{
				newLeafNode(otherlv_2, grammarAccess.getFullDocAccess().getDescriptionKeyword_2_0());
			}
			(
				(
					lv_description_3_0=RULE_STRING
					{
						newLeafNode(lv_description_3_0, grammarAccess.getFullDocAccess().getDescriptionSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFullDocRule());
						}
						setWithLastConsumed(
							$current,
							"description",
							lv_description_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_4='author:'
		{
			newLeafNode(otherlv_4, grammarAccess.getFullDocAccess().getAuthorKeyword_3());
		}
		(
			(
				lv_author_5_0=RULE_STRING
				{
					newLeafNode(lv_author_5_0, grammarAccess.getFullDocAccess().getAuthorSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFullDocRule());
					}
					setWithLastConsumed(
						$current,
						"author",
						lv_author_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6='date:'
		{
			newLeafNode(otherlv_6, grammarAccess.getFullDocAccess().getDateKeyword_5());
		}
		(
			(
				lv_date_7_0=RULE_STRING
				{
					newLeafNode(lv_date_7_0, grammarAccess.getFullDocAccess().getDateSTRINGTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFullDocRule());
					}
					setWithLastConsumed(
						$current,
						"date",
						lv_date_7_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_8='status:'
		{
			newLeafNode(otherlv_8, grammarAccess.getFullDocAccess().getStatusKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFullDocAccess().getStatusDocStatusEnumRuleCall_8_0());
				}
				lv_status_9_0=ruleDocStatus
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFullDocRule());
					}
					set(
						$current,
						"status",
						lv_status_9_0,
						"org.ovirt.api.model.Spec.DocStatus");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDecType
entryRuleDecType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecTypeRule()); }
	iv_ruleDecType=ruleDecType
	{ $current=$iv_ruleDecType.current; }
	EOF;

// Rule DecType
ruleDecType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDecTypeAccess().getDocDocParserRuleCall_0_0());
				}
				lv_doc_0_0=ruleDoc
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDecTypeRule());
					}
					set(
						$current,
						"doc",
						lv_doc_0_0,
						"org.ovirt.api.model.Spec.Doc");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='Type'
		{
			newLeafNode(otherlv_1, grammarAccess.getDecTypeAccess().getTypeKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getDecTypeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDecTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getDecTypeAccess().getColonKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDecTypeRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getDecTypeAccess().getSuperTypeDecTypeCrossReference_3_1_0());
					}
				)
			)
		)?
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getDecTypeAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDecTypeAccess().getPropertiesPropertyParserRuleCall_5_0());
				}
				lv_properties_6_0=ruleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDecTypeRule());
					}
					add(
						$current,
						"properties",
						lv_properties_6_0,
						"org.ovirt.api.model.Spec.Property");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getDecTypeAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current; }
	EOF;

// Rule Property
ruleProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyAccess().getDocDocParserRuleCall_0_0());
				}
				lv_doc_0_0=ruleDoc
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyRule());
					}
					set(
						$current,
						"doc",
						lv_doc_0_0,
						"org.ovirt.api.model.Spec.Doc");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_link_1_0='Link'
				{
					newLeafNode(lv_link_1_0, grammarAccess.getPropertyAccess().getLinkLinkKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyRule());
					}
					setWithLastConsumed($current, "link", true, "Link");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='::'
		{
			newLeafNode(otherlv_3, grammarAccess.getPropertyAccess().getColonColonKeyword_3());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getPropertyAccess().getDtypeDecTypeCrossReference_4_0_0());
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertyAccess().getPtypePrimitiveTypeEnumRuleCall_4_1_0());
					}
					lv_ptype_5_0=rulePrimitiveType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertyRule());
						}
						set(
							$current,
							"ptype",
							lv_ptype_5_0,
							"org.ovirt.api.model.Spec.PrimitiveType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				lv_multiple_6_0='*'
				{
					newLeafNode(lv_multiple_6_0, grammarAccess.getPropertyAccess().getMultipleAsteriskKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyRule());
					}
					setWithLastConsumed($current, "multiple", true, "*");
				}
			)
		)?
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getPropertyAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRuleService
entryRuleService returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServiceRule()); }
	iv_ruleService=ruleService
	{ $current=$iv_ruleService.current; }
	EOF;

// Rule Service
ruleService returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getServiceAccess().getDocDocParserRuleCall_0_0());
				}
				lv_doc_0_0=ruleDoc
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServiceRule());
					}
					set(
						$current,
						"doc",
						lv_doc_0_0,
						"org.ovirt.api.model.Spec.Doc");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getAreasAreaEnumRuleCall_1_0_0());
					}
					lv_areas_1_0=ruleArea
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						add(
							$current,
							"areas",
							lv_areas_1_0,
							"org.ovirt.api.model.Spec.Area");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getServiceAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getServiceAccess().getAreasAreaEnumRuleCall_1_1_1_0());
						}
						lv_areas_3_0=ruleArea
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getServiceRule());
							}
							add(
								$current,
								"areas",
								lv_areas_3_0,
								"org.ovirt.api.model.Spec.Area");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_4='Service'
		{
			newLeafNode(otherlv_4, grammarAccess.getServiceAccess().getServiceKeyword_2());
		}
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getServiceAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getServiceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_6=':'
			{
				newLeafNode(otherlv_6, grammarAccess.getServiceAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getServiceRule());
						}
					}
					otherlv_7=RULE_ID
					{
						newLeafNode(otherlv_7, grammarAccess.getServiceAccess().getSuperServiceServiceCrossReference_4_1_0());
					}
				)
			)
		)?
		otherlv_8='{'
		{
			newLeafNode(otherlv_8, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getService_refsServiceRefParserRuleCall_6_0_0());
					}
					lv_service_refs_9_0=ruleServiceRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						add(
							$current,
							"service_refs",
							lv_service_refs_9_0,
							"org.ovirt.api.model.Spec.ServiceRef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getActionsActionParserRuleCall_6_1_0());
					}
					lv_actions_10_0=ruleAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						add(
							$current,
							"actions",
							lv_actions_10_0,
							"org.ovirt.api.model.Spec.Action");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleServiceRef
entryRuleServiceRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServiceRefRule()); }
	iv_ruleServiceRef=ruleServiceRef
	{ $current=$iv_ruleServiceRef.current; }
	EOF;

// Rule ServiceRef
ruleServiceRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getServiceRefAccess().getDecDocParserRuleCall_0_0());
				}
				lv_dec_0_0=ruleDoc
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServiceRefRule());
					}
					set(
						$current,
						"dec",
						lv_dec_0_0,
						"org.ovirt.api.model.Spec.Doc");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getServiceRefRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getServiceRefAccess().getServiceServiceCrossReference_1_0());
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getServiceRefAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getServiceRefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getServiceRefAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getDocDocParserRuleCall_0_0());
				}
				lv_doc_0_0=ruleDoc
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"doc",
						lv_doc_0_0,
						"org.ovirt.api.model.Spec.Doc");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getActionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getActionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getArgumentsArgumentParserRuleCall_3_0());
				}
				lv_arguments_3_0=ruleArgument
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					add(
						$current,
						"arguments",
						lv_arguments_3_0,
						"org.ovirt.api.model.Spec.Argument");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getActionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	iv_ruleArgument=ruleArgument
	{ $current=$iv_ruleArgument.current; }
	EOF;

// Rule Argument
ruleArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getArgumentAccess().getDocDocParserRuleCall_0_0());
				}
				lv_doc_0_0=ruleDoc
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArgumentRule());
					}
					set(
						$current,
						"doc",
						lv_doc_0_0,
						"org.ovirt.api.model.Spec.Doc");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArgumentAccess().getTypeArgumentTypeEnumRuleCall_1_0());
				}
				lv_type_1_0=ruleArgumentType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArgumentRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.ovirt.api.model.Spec.ArgumentType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArgumentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='::'
		{
			newLeafNode(otherlv_3, grammarAccess.getArgumentAccess().getColonColonKeyword_3());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArgumentRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getArgumentAccess().getDtypeDecTypeCrossReference_4_0_0());
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getArgumentAccess().getPtypePrimitiveTypeEnumRuleCall_4_1_0());
					}
					lv_ptype_5_0=rulePrimitiveType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArgumentRule());
						}
						set(
							$current,
							"ptype",
							lv_ptype_5_0,
							"org.ovirt.api.model.Spec.PrimitiveType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getArgumentAccess().getSemicolonKeyword_5());
		}
	)
;

// Rule DocStatus
ruleDocStatus returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='added'
			{
				$current = grammarAccess.getDocStatusAccess().getAddedEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDocStatusAccess().getAddedEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='else'
			{
				$current = grammarAccess.getDocStatusAccess().getElseEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDocStatusAccess().getElseEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule PrimitiveType
rulePrimitiveType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='String'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getStringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPrimitiveTypeAccess().getStringEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Boolean'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getBooleanEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPrimitiveTypeAccess().getBooleanEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Date'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getDateEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getPrimitiveTypeAccess().getDateEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule ArgumentType
ruleArgumentType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='In'
			{
				$current = grammarAccess.getArgumentTypeAccess().getInEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getArgumentTypeAccess().getInEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Out'
			{
				$current = grammarAccess.getArgumentTypeAccess().getOutEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getArgumentTypeAccess().getOutEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Area
ruleArea returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Virtualization'
			{
				$current = grammarAccess.getAreaAccess().getVirtualizationEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAreaAccess().getVirtualizationEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Storage'
			{
				$current = grammarAccess.getAreaAccess().getStorageEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAreaAccess().getStorageEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Network'
			{
				$current = grammarAccess.getAreaAccess().getNetworkEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAreaAccess().getNetworkEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='SLA'
			{
				$current = grammarAccess.getAreaAccess().getSLAEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAreaAccess().getSLAEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Infrastructure'
			{
				$current = grammarAccess.getAreaAccess().getInfrastructureEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getAreaAccess().getInfrastructureEnumLiteralDeclaration_4());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
